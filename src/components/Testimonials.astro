---
export const prerender = false;

import { formatText } from '../utils/textFormatter';
import { getTestimonialsConfig, getTestimonials } from '../lib/content';

interface Props {
  background?: 'main' | 'alt';
}

// Leer el contenido desde la base de datos
const config = await getTestimonialsConfig();
const rawTestimonials = await getTestimonials();

if (!config) {
  throw new Error('Testimonials config not found in database');
}

// Mapear campos de BD a los campos que espera el componente
const testimonials = rawTestimonials.map(t => ({
  quote: t.quote,
  name: t.author,
  role: t.role || t.author // Usar role si existe, sino author como fallback
}));

const { background = 'main' } = Astro.props;
const bgClass = background === 'alt' ? 'bg-background-alt' : 'bg-background-main';

const { title, subtitle } = config;
---

<section id="casos-exito" class={`py-20 md:py-32 ${bgClass} relative overflow-hidden`}>
    <!-- Comillas decorativas de fondo -->
    <div class="absolute -top-10 left-4 md:left-10 text-[15rem] lg:text-[20rem] font-serif text-foreground/5 z-0" aria-hidden="true">"</div>
    <div class="absolute -bottom-20 right-4 md:right-10 text-[15rem] lg:text-[20rem] font-serif text-foreground/5 z-0" aria-hidden="true">"</div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div class="text-center">
            <h2 class="text-3xl md:text-4xl font-extrabold text-primary">{title}</h2>
            <p class="mt-4 max-w-2xl mx-auto text-lg text-foreground/80" set:html={formatText(subtitle)}></p>
        </div>
        
        <div class="mt-16 overflow-hidden relative max-w-4xl mx-auto">
            <div id="testimonial-carousel" class="flex transition-transform duration-500 ease-in-out">
                <!-- El carrusel se renderiza con JS para evitar duplicidad de código -->
            </div>
        </div>
        
        <div class="text-center mt-8 flex justify-center space-x-3" id="carousel-dots">
            <!-- Los dots se generarán dinámicamente -->
        </div>
    </div>
</section>

<script is:inline define:vars={{ testimonials }}>
  document.addEventListener('DOMContentLoaded', function () {
    const carouselContainer = document.getElementById('testimonial-carousel');
    const dotsContainer = document.getElementById('carousel-dots');
    
    if (!carouselContainer || !dotsContainer) return;

    let currentTestimonial = 0;
    let carouselInterval;

    // Función helper para formatear texto
    function formatText(text) {
      if (!text) return '';
      // Convertir saltos de línea a <br>
      let formatted = text.replace(/\n/g, '<br>');
      // Convertir **texto** a <strong>texto</strong>
      formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      return formatted;
    }

    function renderCarousel() {
      carouselContainer.innerHTML = '';
      dotsContainer.innerHTML = '';
      
      testimonials.forEach((t, index) => {
        const slide = document.createElement('div');
        slide.className = 'w-full flex-shrink-0 px-4';
        // HTML de la tarjeta de testimonio unificado con formateo
        slide.innerHTML = `
          <div class="bg-gradient-to-br from-card to-background-alt text-card-foreground p-8 rounded-2xl shadow-lg border border-border h-full flex flex-col justify-center">
            <p class="text-xl italic">"${formatText(t.quote)}"</p>
            <p class="mt-8 text-lg font-bold text-primary">${t.name}</p>
            <p class="text-sm text-muted-foreground">${t.role}</p>
          </div>
        `;
        carouselContainer.appendChild(slide);

        const dot = document.createElement('button');
        dot.className = `w-3 h-3 rounded-full transition ${index === currentTestimonial ? 'bg-primary' : 'bg-foreground/20'}`;
        dot.addEventListener('click', () => {
          currentTestimonial = index;
          updateCarousel();
          resetInterval();
        });
        dotsContainer.appendChild(dot);
      });
      updateCarousel();
    }
    
    function updateCarousel() {
      carouselContainer.style.transform = `translateX(-${currentTestimonial * 100}%)`;
      Array.from(dotsContainer.children).forEach((dot, index) => {
        dot.className = `w-3 h-3 rounded-full transition ${index === currentTestimonial ? 'bg-primary' : 'bg-foreground/20'}`;
      });
    }

    function nextTestimonial() {
      currentTestimonial = (currentTestimonial + 1) % testimonials.length;
      updateCarousel();
    }

    function resetInterval() {
      clearInterval(carouselInterval);
      carouselInterval = setInterval(nextTestimonial, 6000);
    }

    renderCarousel();
    resetInterval();

    carouselContainer.addEventListener('mouseenter', () => clearInterval(carouselInterval));
    carouselContainer.addEventListener('mouseleave', () => resetInterval());
  });
</script> 