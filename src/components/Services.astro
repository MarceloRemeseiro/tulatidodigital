---
import content from '../content/services.json';
import type { ServiceContent, Package, IndividualService, Step } from '../content/types';

const { title, subtitle, toggle, packages, individualServices, modal } = content as ServiceContent;
---

<section id="servicios" class="py-20 md:py-32 bg-background section-fade-in">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center">
      <h2 class="text-3xl md:text-4xl font-extrabold text-foreground">{title}</h2>
      <p class="mt-4 max-w-2xl mx-auto text-lg text-foreground/80">{subtitle}</p>
    </div>

    <div class="mt-12 flex justify-center space-x-2 md:space-x-4 bg-foreground/10 p-2 rounded-full max-w-sm mx-auto">
      <button id="toggle-paquetes" class="w-full py-2 px-4 rounded-full text-sm md:text-base font-semibold transition active-toggle">
        {toggle.packages}
      </button>
      <button id="toggle-individuales" class="w-full py-2 px-4 rounded-full text-sm md:text-base font-semibold transition text-foreground/80">
        {toggle.individual}
      </button>
    </div>

    <div id="paquetes-container" class="mt-16">
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {packages.map((pkg: Package, index: number) => (
          <div class:list={[
            "p-8 rounded-2xl shadow-lg transform hover:scale-105 transition-all duration-300",
            index === 1 
              ? "bg-gradient-brand text-primary-foreground ring-4 ring-offset-2 ring-primary" 
              : "bg-background-secondary border border-foreground/10"
          ]}>
            <h3 class="text-2xl font-bold">{pkg.title}</h3>
            <p class:list={["mt-4", { "opacity-90": index === 1, "text-foreground/80": index !== 1 }]}>
              {pkg.description}
            </p>
            <ul class:list={["mt-6 space-y-3", { "text-foreground/90": index !== 1 }]}>
              {pkg.features.map((feature: string) => (
                <li class="flex items-center">
                  <span class:list={["mr-3", { "text-primary": index !== 1 }]}>âœ”</span>{feature}
                </li>
              ))}
            </ul>
            <a href="#contacto" class:list={[
              "mt-8 block w-full text-center font-bold py-3 px-6 rounded-lg transition-colors",
              index === 1 
                ? "bg-background text-primary hover:bg-background/90" 
                : "bg-primary text-primary-foreground hover:bg-primary/90"
            ]}>
              {pkg.cta}
            </a>
          </div>
        ))}
      </div>
    </div>
    
    <div id="individuales-container" class="mt-16 hidden">
      <div class="grid sm:grid-cols-2 lg:grid-cols-4 gap-8" id="services-grid">
        <!-- Services will be dynamically loaded here -->
      </div>
    </div>
  </div>
</section>

<!-- Modal for AI Videos -->
<div id="modal-ia" class="modal fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 opacity-0 pointer-events-none">
  <div class="bg-background rounded-2xl shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-y-auto transform scale-95 transition-transform duration-300">
    <div class="p-6 md:p-8 relative">
      <button data-modal-close="modal-ia" class="absolute top-4 right-4 text-foreground/50 hover:text-foreground">
        <span class="text-2xl">&times;</span>
      </button>
      <div class="text-center">
        <h2 class="text-3xl font-bold text-secondary">{modal.title}</h2>
        <p class="mt-2 text-lg text-foreground/80">{modal.subtitle}</p>
      </div>
      <div class="mt-8 text-left space-y-6">
        <p class="text-foreground/90">{modal.paragraph}</p>
        
        <div>
          <h3 class="font-bold text-xl text-primary mb-4">{modal.stepsTitle}</h3>
          <div class="grid md:grid-cols-3 gap-6 text-center">
            {modal.steps.map((step: Step, index: number) => (
              <div class="bg-foreground/10 p-4 rounded-lg">
                <div class="text-3xl font-bold text-primary">{index + 1}</div>
                <p class="mt-2 font-semibold text-foreground">{step.title}</p>
                <p class="text-sm text-foreground/70">{step.description}</p>
              </div>
            ))}
          </div>
        </div>
        
        <div>
          <h3 class="font-bold text-xl text-primary mb-2">{modal.benefitsTitle}</h3>
          <ul class="list-disc list-inside space-y-1 text-foreground/90">
            {modal.benefits.map((benefit: string) => <li>{benefit}</li>)}
          </ul>
        </div>
        
        <div class="pt-4 text-center">
          <a href="#contacto" class="bg-gradient-brand text-primary-foreground font-bold py-3 px-8 rounded-lg hover:opacity-90 transition-opacity">
            {modal.cta}
          </a>
        </div>
      </div>
    </div>
  </div>
</div>
<script define:vars={{ individualServices }} is:inline>
  document.addEventListener('DOMContentLoaded', function () {
    const togglePaquetes = document.getElementById('toggle-paquetes');
    const toggleIndividuales = document.getElementById('toggle-individuales');
    const paquetesContainer = document.getElementById('paquetes-container');
    const individualesContainer = document.getElementById('individuales-container');
    const servicesGrid = document.getElementById('services-grid');

    function renderIndividualServices() {
      if (!servicesGrid) return;
      servicesGrid.innerHTML = '';
      individualServices.forEach((service) => {
        const serviceCard = document.createElement('div');
        serviceCard.className = `bg-background p-6 rounded-xl shadow-md hover:shadow-xl transition-shadow border border-foreground/10 text-center ${service.type === 'ia-special' ? 'bg-secondary/10 border-2 border-secondary' : ''}`;
        serviceCard.innerHTML = `
          <h3 class="text-xl font-bold ${service.type === 'ia-special' ? 'text-secondary' : 'text-foreground'}">${service.title}</h3>
          <p class="mt-2 text-sm ${service.type === 'ia-special' ? 'text-secondary' : 'text-foreground/80'}">${service.description}</p>
          ${service.type === 'ia-special' ? 
            `<button data-modal-target="modal-ia" class="mt-4 inline-block text-secondary hover:text-secondary/90 font-semibold">${service.cta}</button>` :
            `<a href="#contacto" class="mt-4 inline-block text-primary hover:text-primary/90 font-semibold">${service.cta}</a>`
          }
        `;
        servicesGrid.appendChild(serviceCard);
      });
    }

    togglePaquetes?.addEventListener('click', () => {
      paquetesContainer?.classList.remove('hidden');
      individualesContainer?.classList.add('hidden');
      togglePaquetes?.classList.add('active-toggle');
      toggleIndividuales?.classList.remove('active-toggle');
      toggleIndividuales?.classList.add('text-foreground/80');
    });

    toggleIndividuales?.addEventListener('click', () => {
      individualesContainer?.classList.remove('hidden');
      paquetesContainer?.classList.add('hidden');
      toggleIndividuales?.classList.add('active-toggle');
      toggleIndividuales?.classList.remove('text-foreground/80');
      togglePaquetes?.classList.remove('active-toggle');
      renderIndividualServices();
    });

    togglePaquetes?.click();

    document.addEventListener('click', (e) => {
      const target = e.target;
      if (target && target.matches('[data-modal-target]')) {
        const modalId = target.dataset.modalTarget;
        if (modalId) {
          const modal = document.getElementById(modalId);
          openModal(modal);
        }
      }
    });

    document.querySelectorAll('[data-modal-close]').forEach(close => {
      close.addEventListener('click', () => {
        const modalId = close.dataset.modalClose;
        if (modalId) {
          const modal = document.getElementById(modalId);
          closeModal(modal);
        }
      });
    });

    window.addEventListener('click', event => {
      const target = event.target;
      if (target.classList.contains('modal')) {
        closeModal(target);
      }
    });

    function openModal(modal) {
      if (!modal) return;
      modal.classList.remove('opacity-0', 'pointer-events-none');
      setTimeout(() => modal.querySelector('div > div')?.classList.remove('scale-95'), 50);
      document.body.style.overflow = 'hidden';
    }

    function closeModal(modal) {
      if (!modal) return;
      modal.querySelector('div > div')?.classList.add('scale-95');
      setTimeout(() => modal.classList.add('opacity-0', 'pointer-events-none'), 250);
      document.body.style.overflow = 'auto';
    }
  });
</script> 