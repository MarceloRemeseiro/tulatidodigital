---
import { promises as fs } from 'fs';
import path from 'path';
import type { ServiceContent, Package } from '../content/types';
import { formatText } from '../utils/textFormatter';

interface Props {
  background?: 'main' | 'alt';
}

// Leer el contenido dinámicamente
const servicesPath = path.join(process.cwd(), 'src/content/services.json');
const servicesFile = await fs.readFile(servicesPath, 'utf-8');
const content = JSON.parse(servicesFile) as ServiceContent;

const { background = 'alt' } = Astro.props;
const bgClass = background === 'alt' ? 'bg-background-alt' : 'bg-background-main';

const { title, subtitle, toggle, packages, individualServices } = content;
---

<section id="servicios" class={`py-20 md:py-32 ${bgClass} section-fade-in`}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center">
      <h2 class="text-3xl md:text-4xl font-extrabold text-foreground">{title}</h2>
      <p class="mt-4 max-w-2xl mx-auto text-lg text-foreground/80" set:html={formatText(subtitle)}></p>
    </div>

    <div class="mt-16">
      <div class="grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8" id="services-grid">
        <!-- Services will be dynamically loaded here -->
      </div>
    </div>
  </div>
</section>


<script is:inline define:vars={{ services: individualServices }}>
  document.addEventListener('DOMContentLoaded', function () {
    const servicesGrid = document.getElementById('services-grid');

    // Función helper para formatear texto
    function formatText(text) {
      if (!text) return '';
      // Convertir saltos de línea a <br>
      let formatted = text.replace(/\n/g, '<br>');
      // Convertir **texto** a <strong>texto</strong>
      formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      return formatted;
    }

    function renderServices() {
      if (!servicesGrid) return;
      servicesGrid.innerHTML = '';
      services.forEach((service) => {
        // Determinar la URL del enlace y el target
        let linkUrl = '#contacto'; // Por defecto
        let linkTarget = '';
        
        if (service.linkType === 'internal' && service.customLink) {
          linkUrl = `/${service.customLink}`;
        } else if (service.linkType === 'external' && service.customLink) {
          linkUrl = service.customLink;
          linkTarget = ' target="_blank" rel="noopener noreferrer"';
        } else if (service.type === 'ia-special') {
          // Compatibilidad con el sistema anterior
          linkUrl = '/sin-camara';
        }
        
        const serviceCard = document.createElement('div');
        serviceCard.className = 'bg-background p-6 rounded-xl shadow-md hover:shadow-xl transition-all duration-300 border border-foreground/10 text-center transform hover:scale-105';
        serviceCard.innerHTML = `
          <h3 class="text-xl font-bold text-foreground mb-3">${service.title}</h3>
          <p class="text-sm text-foreground/80 leading-relaxed mb-4">${formatText(service.description)}</p>
          <a href="${linkUrl}"${linkTarget} class="inline-block bg-primary text-primary-foreground px-4 py-2 rounded-lg font-semibold hover:bg-primary/90 transition-colors">${service.cta}</a>
        `;
        servicesGrid.appendChild(serviceCard);
      });
    }

    // Renderizar servicios al cargar la página
    renderServices();
  });
</script> 