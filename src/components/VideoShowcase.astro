---
export const prerender = false;
import VideoAvatar from './VideoAvatar.astro';
import type { VideoShowcaseContent } from '../content/types';
import { promises as fs } from 'fs';
import path from 'path';

interface Props {
  background?: 'main' | 'alt';
}

const { background = 'main' } = Astro.props;

// Leer el contenido dinámicamente
const videoshowcasePath = path.join(process.cwd(), 'src/content/videoshowcase.json');
const videoshowcaseFile = await fs.readFile(videoshowcasePath, 'utf-8');
const content = JSON.parse(videoshowcaseFile) as VideoShowcaseContent;

// Debug temporal para verificar el video
console.log('VideoShowcase: Video filename from JSON:', content.videoFileName);

const bgClass = background === 'alt' ? 'bg-background-alt' : 'bg-background-main';
---

<section class={`py-20 md:py-32 ${bgClass} section-fade-in`}>
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-3xl md:text-4xl font-extrabold text-foreground mb-4">
        {content.mainTitle} <span class="text-primary">{content.mainTitleHighlight}</span>
      </h2>
      <p class="text-lg text-foreground/80 max-w-3xl mx-auto" set:html={content.subtitle}>
      </p>
    </div>

    <div class="grid lg:grid-cols-2 gap-12 items-center">
      <!-- Columna izquierda: Video -->
      <div class="order-2 lg:order-1">
        <VideoAvatar 
          videoFileName={content.videoFileName}
          title=""
          subtitle={content.videoSubtitle}
          showControls={true}
          autoplay={false}
          muted={true}
          loop={true}
          containerClass="lg:text-left"
        />
      </div>

      <!-- Columna derecha: Features -->
      <div class="order-1 lg:order-2 space-y-8">
        <div>
          <h3 class="text-2xl font-bold text-foreground mb-4">
            {content.featuresTitle}
          </h3>
          <div class="space-y-4">
            {content.features.map((feature) => (
              <div class="flex items-start space-x-4">
                <div class="flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                  <span class="text-primary text-xl">{feature.emoji}</span>
                </div>
                <div>
                  <h4 class="font-semibold text-foreground">{feature.title}</h4>
                  <p class="text-sm text-foreground/70">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div class="bg-primary/5 p-6 rounded-xl border border-primary/10">
          <h4 class="font-bold text-foreground mb-2">{content.idealForTitle}</h4>
          <ul class="text-sm text-foreground/80 space-y-1">
            {content.idealForItems.map((item) => (
              <li>• {item}</li>
            ))}
          </ul>
        </div>

        <div class="flex flex-col sm:flex-row gap-4">
          <a 
            href="/sin-camara" 
            class="inline-block bg-primary hover:bg-primary/90 text-primary-foreground font-bold py-3 px-6 rounded-lg transition-colors duration-300 shadow-lg hover:shadow-xl text-center"
          >
            {content.buttons.primary}
          </a>
          <a 
            href="#contacto" 
            class="inline-block border-2 border-primary text-primary hover:bg-primary hover:text-primary-foreground font-bold py-3 px-6 rounded-lg transition-all duration-300 text-center"
          >
            {content.buttons.secondary}
          </a>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Fade in animation for sections
    const sections = document.querySelectorAll('.section-fade-in');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, { threshold: 0.1 });

    sections.forEach(section => {
      observer.observe(section);
    });
  });
</script> 