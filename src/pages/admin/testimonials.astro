---
export const prerender = false;

import Layout from '../../layouts/AdminLayout.astro';
import { promises as fs } from 'fs';
import path from 'path';

// Leer el contenido din√°micamente
const testimonialsPath = path.join(process.cwd(), 'src/content/testimonials.json');
const testimonialsFile = await fs.readFile(testimonialsPath, 'utf-8');
const testimonialsContent = JSON.parse(testimonialsFile);

// Pasar las credenciales de forma segura al cliente
const credentials = {
  username: import.meta.env.USUARIO,
  password: import.meta.env.PASS
};
---

<Layout title="Admin | Testimonios">
  <button slot="page-actions" id="save-all-btn" class="button-primary">Guardar Cambios</button>

  <div class="max-w-4xl mx-auto py-10 px-4">
    <a href="/admin" class="text-primary hover:underline mb-4 block">&larr; Volver al panel de admin</a>
    <h1 class="text-3xl font-bold mb-6">Editar Contenido de la Secci√≥n Testimonios</h1>
    <p class="mb-6 text-foreground/80">Todos los cambios que realices se guardar√°n √∫nicamente cuando presiones el bot√≥n "Guardar Cambios" de la esquina superior derecha.</p>
    
    <div id="notification" class="hidden p-4 mb-4 rounded-lg"></div>

    <!-- Informaci√≥n sobre formato -->
    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
      <h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">üí° Formato de texto disponible:</h3>
      <ul class="text-sm text-blue-700 dark:text-blue-300 space-y-1">
        <li>‚Ä¢ Para <strong>negritas</strong>: usa **texto en negrita**</li>
        <li>‚Ä¢ Los saltos de l√≠nea se respetan autom√°ticamente</li>
      </ul>
    </div>

    <form id="testimonials-form" class="space-y-6">
      <fieldset class="space-y-6 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2">Contenido Principal</legend>
        <div>
          <label for="title" class="block text-sm font-medium">T√≠tulo Principal</label>
          <input type="text" id="title" name="title" value={testimonialsContent.title} class="mt-1 block w-full input">
        </div>
        <div>
          <label for="subtitle" class="block text-sm font-medium">Subt√≠tulo</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <textarea id="subtitle" name="subtitle" rows="3" class="mt-1 block w-full input">{testimonialsContent.subtitle}</textarea>
        </div>
      </fieldset>

      <fieldset class="mt-8 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2">Testimonios</legend>
        <div id="testimonials-container" class="space-y-6">
          <!-- Los testimonios se renderizar√°n aqu√≠ -->
        </div>
        <div class="mt-6">
          <button type="button" id="add-testimonial-btn" class="button-secondary">A√±adir Testimonio</button>
        </div>
      </fieldset>
    </form>
  </div>
</Layout>

<template id="testimonial-template">
  <div class="testimonial-item border border-foreground/20 p-6 rounded-lg" data-testimonial-id="">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Testimonio</h3>
      <button type="button" class="button-danger delete-testimonial-btn">Borrar Testimonio</button>
    </div>
    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium">Cita</label>
        <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
        <textarea data-field="quote" rows="4" class="testimonial-field mt-1 block w-full input"></textarea>
      </div>
      <div>
        <label class="block text-sm font-medium">Nombre</label>
        <input type="text" data-field="name" class="testimonial-field mt-1 block w-full input">
      </div>
      <div>
        <label class="block text-sm font-medium">Rol o Empresa</label>
        <input type="text" data-field="role" class="testimonial-field mt-1 block w-full input">
      </div>
    </div>
  </div>
</template>

<script is:inline define:vars={{ contentData: testimonialsContent, authCredentials: credentials }}>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('testimonials-form');
    const container = document.getElementById('testimonials-container');
    const template = document.getElementById('testimonial-template');
    const saveBtn = document.getElementById('save-all-btn');
    const notification = document.getElementById('notification');
    const titleInput = document.getElementById('title');
    const subtitleInput = document.getElementById('subtitle');

    // Asegurar que todos los testimonios tengan ID
    contentData.testimonials.forEach(t => {
        if (!t.id) t.id = crypto.randomUUID();
    });

    // Preparar autenticaci√≥n
    const authHeader = 'Basic ' + btoa(authCredentials.username + ':' + authCredentials.password);

    const showNotification = (message, isError = false) => {
      if (notification) {
        notification.textContent = message;
        notification.className = `p-4 mb-4 rounded-lg ${isError ? 'bg-red-500/20 text-red-500' : 'bg-green-500/20 text-green-500'} block`;
        setTimeout(() => { notification.classList.add('hidden'); }, 3000);
      }
    };



    function renderTestimonials() {
      if (!container || !template) return;
      container.innerHTML = '';
      if (!contentData.testimonials) return;
      
      contentData.testimonials.forEach(testimonial => {
        const el = template.content.cloneNode(true);
        const testimonialItem = el.querySelector('.testimonial-item');
        testimonialItem.dataset.testimonialId = testimonial.id;
        testimonialItem.querySelector('[data-field="quote"]').value = testimonial.quote;
        testimonialItem.querySelector('[data-field="name"]').value = testimonial.name;
        testimonialItem.querySelector('[data-field="role"]').value = testimonial.role;
        container.appendChild(testimonialItem);
      });
    }

    if (form && container && template && saveBtn && notification && titleInput && subtitleInput) {
      form.addEventListener('click', (e) => {
        const target = e.target;
        if (target.id === 'add-testimonial-btn') {
          contentData.testimonials.push({ id: crypto.randomUUID(), quote: 'Nueva cita...', name: 'Nombre', role: 'Rol o Empresa' });
          renderTestimonials();
        }
        
        const itemEl = target.closest('.testimonial-item');
        if (itemEl && target.classList.contains('delete-testimonial-btn')) {
          if (confirm('¬øSeguro que quieres borrar este testimonio?')) {
            const testimonialId = itemEl.dataset.testimonialId;
            contentData.testimonials = contentData.testimonials.filter(t => t.id !== testimonialId);
            renderTestimonials();
          }
        }
      });

      saveBtn.addEventListener('click', async () => {
          // Recolectar datos del formulario en el momento de guardar
          if (!container) return;
          const updatedTestimonials = Array.from(container.querySelectorAll('.testimonial-item')).map(itemEl => {
              return {
                  id: itemEl.dataset.testimonialId,
                  quote: itemEl.querySelector('[data-field="quote"]').value,
                  name: itemEl.querySelector('[data-field="name"]').value,
                  role: itemEl.querySelector('[data-field="role"]').value,
              }
          });
  
          const finalData = {
              title: titleInput.value,
              subtitle: subtitleInput.value,
              testimonials: updatedTestimonials
          };
  
        try {
          const response = await fetch('/api/testimonials', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Authorization': authHeader
            },
            body: JSON.stringify(finalData),
          });
          if (!response.ok) throw new Error('Error al guardar');
          
          showNotification('¬°Testimonios guardados con √©xito!', false);
        } catch (error) {
          showNotification('Error al guardar. Int√©ntalo de nuevo.', true);
        }
      });
      
      renderTestimonials();
    } else {
        console.error('Faltan elementos del formulario en la p√°gina.')
    }
  });
</script> 