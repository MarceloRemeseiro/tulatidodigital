---
export const prerender = false;

import Layout from '../../layouts/AdminLayout.astro';
import { promises as fs } from 'fs';
import path from 'path';
import type { ServiceContent } from '../../content/types';

// Leer el contenido din√°micamente
const servicesPath = path.join(process.cwd(), 'src/content/services.json');
const servicesFile = await fs.readFile(servicesPath, 'utf-8');
const content = JSON.parse(servicesFile);
const typedContent = content as ServiceContent;

// Pasar las credenciales de forma segura al cliente
const credentials = {
  username: import.meta.env.USUARIO,
  password: import.meta.env.PASS
};
---

<Layout title="Admin - Servicios">
  <button slot="page-actions" id="save-all-btn" class="button-primary">Guardar Cambios</button>

  <div class="max-w-4xl mx-auto py-10 px-4">
    <a href="/admin" class="text-primary hover:underline mb-4 block">&larr; Volver al panel de admin</a>
    <h1 class="text-3xl font-bold mb-6">Editar Contenido de la Secci√≥n Servicios</h1>
    <p class="mb-6 text-foreground/80">Todos los cambios que realices se guardar√°n √∫nicamente cuando presiones el bot√≥n "Guardar Cambios" de la esquina superior derecha.</p>
    
    <div id="notification" class="hidden p-4 mb-4 rounded-lg"></div>

    <!-- Informaci√≥n sobre formato -->
    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
      <h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">üí° Formato de texto disponible:</h3>
      <ul class="text-sm text-blue-700 dark:text-blue-300 space-y-1">
        <li>‚Ä¢ Para <strong>negritas</strong>: usa **texto en negrita**</li>
        <li>‚Ä¢ Los saltos de l√≠nea se respetan autom√°ticamente</li>
      </ul>
    </div>

    <form id="services-form">
      <fieldset class="space-y-6 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2">Contenido Principal</legend>
        
        <div>
          <label for="title" class="block text-sm font-medium">T√≠tulo Principal</label>
          <input type="text" id="title" name="title" value={typedContent.title} class="mt-1 block w-full input">
        </div>

        <div>
          <label for="subtitle" class="block text-sm font-medium">Subt√≠tulo</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <textarea id="subtitle" name="subtitle" rows="3" class="mt-1 block w-full input">{typedContent.subtitle}</textarea>
        </div>
      </fieldset>

      <fieldset class="mt-8 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2">Paquetes Integrales</legend>
        <div id="packages-container" class="space-y-6">
          <!-- Los paquetes se renderizar√°n aqu√≠ con JS -->
        </div>
      </fieldset>
      
      <fieldset class="mt-8 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2">Servicios Individuales</legend>
        <div id="services-container" class="space-y-6">
          <!-- Los servicios se renderizar√°n aqu√≠ con JS -->
        </div>
      </fieldset>


      
    </form>
  </div>
</Layout>

<template id="package-template">
  <div class="package-item border-t border-foreground/10 pt-6" data-package-id="">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Paquete</h3>
      <button type="button" class="button-danger delete-package-btn">Borrar Paquete</button>
    </div>
    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium">T√≠tulo</label>
        <input type="text" data-field="title" class="package-field mt-1 block w-full input">
      </div>
      <div>
        <label class="block text-sm font-medium">Descripci√≥n</label>
        <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
        <textarea data-field="description" rows="3" class="package-field mt-1 block w-full input"></textarea>
      </div>
      <div>
        <label class="block text-sm font-medium">Texto del Bot√≥n (CTA)</label>
        <input type="text" data-field="cta" class="package-field mt-1 block w-full input">
      </div>
      <div class="features-section">
        <label class="block text-sm font-medium">Caracter√≠sticas</label>
        <div class="features-list space-y-2 mt-2">
          <!-- Las caracter√≠sticas se renderizar√°n aqu√≠ -->
        </div>
        <button type="button" class="button-secondary-outline add-feature-btn mt-2">A√±adir Caracter√≠stica</button>
      </div>
    </div>
  </div>
</template>

<template id="feature-template">
  <div class="feature-item flex items-center gap-2">
    <input type="text" class="feature-input flex-grow input text-sm" value="">
    <button type="button" class="button-danger-outline delete-feature-btn">X</button>
  </div>
</template>

<template id="service-template">
  <div class="service-item border-t border-foreground/10 pt-6" data-service-id="">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Servicio</h3>
      <button type="button" class="button-danger delete-service-btn">Borrar Servicio</button>
    </div>
    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium">T√≠tulo</label>
        <input type="text" data-field="title" class="service-field mt-1 block w-full input">
      </div>
      <div>
        <label class="block text-sm font-medium">Descripci√≥n</label>
        <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
        <textarea data-field="description" rows="3" class="service-field mt-1 block w-full input"></textarea>
      </div>
      <div>
        <label class="block text-sm font-medium">Texto del Bot√≥n (CTA)</label>
        <input type="text" data-field="cta" class="service-field mt-1 block w-full input">
      </div>
    </div>
  </div>
</template>



<script is:inline define:vars={{ initialContent: typedContent, authCredentials: credentials }}>
document.addEventListener('DOMContentLoaded', () => {
  let content = JSON.parse(JSON.stringify(initialContent));
  
  // Preparar autenticaci√≥n
  const authHeader = 'Basic ' + btoa(authCredentials.username + ':' + authCredentials.password);

  // FIX: Asegurarse de que todos los elementos tengan un ID para poder editarlos.
  // Estos IDs se guardar√°n permanentemente al hacer clic en "Guardar Cambios".
  content.packages.forEach(pkg => {
    if (!pkg.id) pkg.id = crypto.randomUUID();
  });
  content.individualServices.forEach(service => {
    if (!service.id) service.id = crypto.randomUUID();
  });

  const form = document.getElementById('services-form');
  const packagesContainer = document.getElementById('packages-container');
  const servicesContainer = document.getElementById('services-container');
  const packageTemplate = document.getElementById('package-template');
  const featureTemplate = document.getElementById('feature-template');
  const serviceTemplate = document.getElementById('service-template');

  // Funciones para renderizar el contenido (sin cambios)
  function renderPackages() {
    packagesContainer.innerHTML = '';
    content.packages.forEach(pkg => {
      const pkgEl = packageTemplate.content.cloneNode(true).firstElementChild;
      pkgEl.dataset.packageId = pkg.id;
      pkgEl.querySelector('[data-field="title"]').value = pkg.title;
      pkgEl.querySelector('[data-field="description"]').value = pkg.description;
      pkgEl.querySelector('[data-field="cta"]').value = pkg.cta;
      const featuresList = pkgEl.querySelector('.features-list');
      featuresList.innerHTML = '';
      pkg.features.forEach((feature, index) => {
        const featureEl = featureTemplate.content.cloneNode(true).firstElementChild;
        featureEl.querySelector('.feature-input').value = feature;
        featureEl.dataset.featureIndex = index;
        featuresList.appendChild(featureEl);
      });
      packagesContainer.appendChild(pkgEl);
    });
  }

  function renderServices() {
    servicesContainer.innerHTML = '';
    content.individualServices.forEach(service => {
      const serviceEl = serviceTemplate.content.cloneNode(true).firstElementChild;
      serviceEl.dataset.serviceId = service.id;
      serviceEl.querySelector('[data-field="title"]').value = service.title;
      serviceEl.querySelector('[data-field="description"]').value = service.description;
      serviceEl.querySelector('[data-field="cta"]').value = service.cta;
      servicesContainer.appendChild(serviceEl);
    });
  }

  function renderAll() {
    renderPackages();
    renderServices();
  }
  
  // RENDERIZADO
  function renderPackages() {
    packagesContainer.innerHTML = '';
    content.packages.forEach(pkg => {
      const pkgEl = packageTemplate.content.cloneNode(true).firstElementChild;
      pkgEl.dataset.packageId = pkg.id;
      pkgEl.querySelector('[data-field="title"]').value = pkg.title;
      pkgEl.querySelector('[data-field="description"]').value = pkg.description;
      pkgEl.querySelector('[data-field="cta"]').value = pkg.cta;
      const featuresList = pkgEl.querySelector('.features-list');
      featuresList.innerHTML = '';
      pkg.features.forEach((feature, index) => {
        const featureEl = featureTemplate.content.cloneNode(true).firstElementChild;
        featureEl.querySelector('.feature-input').value = feature;
        featureEl.dataset.featureIndex = index;
        featuresList.appendChild(featureEl);
      });
      packagesContainer.appendChild(pkgEl);
    });
  }

  function renderServices() {
    servicesContainer.innerHTML = '';
    content.individualServices.forEach(service => {
      const serviceEl = serviceTemplate.content.cloneNode(true).firstElementChild;
      serviceEl.dataset.serviceId = service.id;
      serviceEl.querySelector('[data-field="title"]').value = service.title;
      serviceEl.querySelector('[data-field="description"]').value = service.description;
      serviceEl.querySelector('[data-field="cta"]').value = service.cta;
      servicesContainer.appendChild(serviceEl);
    });
  }

  // MANEJO DE CLICS (Borrar) - SOLO LOCAL
  form.addEventListener('click', (e) => {
    const target = e.target;
    
    const pkgEl = target.closest('.package-item');
    if (pkgEl) {
      const packageId = pkgEl.dataset.packageId;
      if (target.classList.contains('delete-package-btn')) {
        if (confirm('¬øSeguro que quieres borrar este paquete?')) {
          content.packages = content.packages.filter(p => p.id !== packageId);
          renderPackages();
        }
      }
      if (target.classList.contains('add-feature-btn')) {
        const pkg = content.packages.find(p => p.id === packageId);
        if (pkg) pkg.features.push('Nueva caracter√≠stica');
        renderPackages();
      }
      if (target.classList.contains('delete-feature-btn')) {
        const pkg = content.packages.find(p => p.id === packageId);
        const featureEl = target.closest('.feature-item');
        if (pkg && featureEl) {
          pkg.features.splice(parseInt(featureEl.dataset.featureIndex, 10), 1);
          renderPackages();
        }
      }
    }
    
    const serviceEl = target.closest('.service-item');
    if (serviceEl && target.classList.contains('delete-service-btn')) {
      if (confirm('¬øSeguro que quieres borrar este servicio?')) {
        const serviceId = serviceEl.dataset.serviceId;
        content.individualServices = content.individualServices.filter(s => s.id !== serviceId);
        renderServices();
      }
    }
  });
  
  // MANEJO DE EDICI√ìN DE TEXTO - SOLO LOCAL
  form.addEventListener('input', (e) => {
    const target = e.target;
    // ... (L√≥gica para actualizar el objeto 'content' localmente)
    // Este c√≥digo es un poco largo, pero maneja la actualizaci√≥n de todos los campos
    const pkgEl = target.closest('.package-item');
    const serviceEl = target.closest('.service-item');

    if (pkgEl) {
        const packageId = pkgEl.dataset.packageId;
        const pkg = content.packages.find(p => p.id === packageId);
        if (!pkg) return;
        if (target.matches('[data-field]')) {
            pkg[target.dataset.field] = target.value;
        } else if (target.matches('.feature-input')) {
            const featureIndex = parseInt(target.closest('.feature-item').dataset.featureIndex, 10);
            pkg.features[featureIndex] = target.value;
        }
    } else if (serviceEl) {
        const serviceId = serviceEl.dataset.serviceId;
        const service = content.individualServices.find(s => s.id === serviceId);
        if (service && target.matches('[data-field]')) {
            service[target.dataset.field] = target.value;
        }
    } else { // Campos generales
        if(content[target.id] !== undefined) content[target.id] = target.value;
    }
  });

  // BOT√ìN DE GUARDADO GENERAL - √öNICA LLAMADA A LA API
  document.getElementById('save-all-btn').addEventListener('click', async () => {
    const notification = document.getElementById('notification');
    try {
      const response = await fetch('/api/services', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': authHeader
        },
        body: JSON.stringify({ action: 'update_all', data: content }),
      });
      if (!response.ok) throw new Error('Error de red al guardar');
      
      notification.textContent = '¬°Cambios guardados con √©xito!';
      notification.className = 'p-4 mb-4 rounded-lg bg-green-200 text-green-800 block';
    } catch (error) {
      notification.textContent = 'Error al guardar. Int√©ntalo de nuevo.';
      notification.className = 'p-4 mb-4 rounded-lg bg-red-200 text-red-800 block';
    } finally {
      setTimeout(() => { notification.classList.add('hidden'); }, 3000);
    }
  });

  renderAll();
});
</script> 