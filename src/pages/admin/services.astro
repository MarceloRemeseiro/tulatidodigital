---
export const prerender = false;

import Layout from '../../layouts/AdminLayout.astro';
import { promises as fs } from 'fs';
import path from 'path';
import type { ServiceContent } from '../../content/types';

// Leer el contenido din√°micamente
const servicesPath = path.join(process.cwd(), 'src/content/services.json');
const servicesFile = await fs.readFile(servicesPath, 'utf-8');
const content = JSON.parse(servicesFile);
const typedContent = content as ServiceContent;

// Pasar las credenciales de forma segura al cliente
const credentials = {
  username: process.env.USUARIO || import.meta.env.USUARIO,
  password: process.env.PASS || import.meta.env.PASS
};
---

<Layout title="Admin - Servicios">
  <button slot="page-actions" id="save-all-btn" class="button-primary">Guardar Cambios</button>

  <div class="max-w-4xl mx-auto py-10 px-4">
    <a href="/admin" class="text-primary hover:underline mb-4 block">&larr; Volver al panel de admin</a>
    <h1 class="text-3xl font-bold mb-6">Editar Contenido de la Secci√≥n Servicios</h1>
    <p class="mb-6 text-foreground/80">Todos los cambios que realices se guardar√°n √∫nicamente cuando presiones el bot√≥n "Guardar Cambios" de la esquina superior derecha.</p>
    
    <div id="notification" class="hidden p-4 mb-4 rounded-lg"></div>

    <!-- Informaci√≥n sobre formato -->
    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
      <h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">üí° Formato de texto disponible:</h3>
      <ul class="text-sm text-blue-700 dark:text-blue-300 space-y-1">
        <li>‚Ä¢ Para <strong>negritas</strong>: usa **texto en negrita**</li>
        <li>‚Ä¢ Los saltos de l√≠nea se respetan autom√°ticamente</li>
      </ul>
    </div>

    <form id="services-form">
      <fieldset class="space-y-6 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2">Contenido Principal</legend>
        
        <div>
          <label for="title" class="block text-sm font-medium">T√≠tulo Principal</label>
          <input type="text" id="title" name="title" value={typedContent.title} class="mt-1 block w-full input">
        </div>

        <div>
          <label for="subtitle" class="block text-sm font-medium">Subt√≠tulo</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <textarea id="subtitle" name="subtitle" rows="3" class="mt-1 block w-full input">{typedContent.subtitle}</textarea>
        </div>
      </fieldset>

      <fieldset class="mt-8 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2">Servicios</legend>
        <div id="services-container" class="space-y-6">
          <!-- Los servicios se renderizar√°n aqu√≠ con JS -->
        </div>
        <div class="mt-6 pt-4 border-t border-foreground/10">
          <button type="button" id="add-service-btn" class="button-secondary">Agregar Nuevo Servicio</button>
        </div>
      </fieldset>


      
    </form>
  </div>
</Layout>

<template id="package-template">
  <div class="package-item border-t border-foreground/10 pt-6" data-package-id="">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Paquete</h3>
      <button type="button" class="button-danger delete-package-btn">Borrar Paquete</button>
    </div>
    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium">T√≠tulo</label>
        <input type="text" data-field="title" class="package-field mt-1 block w-full input">
      </div>
      <div>
        <label class="block text-sm font-medium">Descripci√≥n</label>
        <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
        <textarea data-field="description" rows="3" class="package-field mt-1 block w-full input"></textarea>
      </div>
      <div>
        <label class="block text-sm font-medium">Texto del Bot√≥n (CTA)</label>
        <input type="text" data-field="cta" class="package-field mt-1 block w-full input">
      </div>
      <div class="features-section">
        <label class="block text-sm font-medium">Caracter√≠sticas</label>
        <div class="features-list space-y-2 mt-2">
          <!-- Las caracter√≠sticas se renderizar√°n aqu√≠ -->
        </div>
        <button type="button" class="button-secondary-outline add-feature-btn mt-2">A√±adir Caracter√≠stica</button>
      </div>
    </div>
  </div>
</template>

<template id="feature-template">
  <div class="feature-item flex items-center gap-2">
    <input type="text" class="feature-input flex-grow input text-sm" value="">
    <button type="button" class="button-danger-outline delete-feature-btn">X</button>
  </div>
</template>

<template id="service-template">
  <div class="service-item border-t border-foreground/10 pt-6" data-service-id="">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Servicio</h3>
      <button type="button" class="button-danger delete-service-btn">Borrar Servicio</button>
    </div>
    <div class="space-y-4">
      <div>
        <label class="block text-sm font-medium">T√≠tulo</label>
        <input type="text" data-field="title" class="service-field mt-1 block w-full input">
      </div>
      <div>
        <label class="block text-sm font-medium">Descripci√≥n</label>
        <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
        <textarea data-field="description" rows="4" class="service-field mt-1 block w-full input"></textarea>
      </div>
      <div>
        <label class="block text-sm font-medium">Texto del Bot√≥n (CTA)</label>
        <input type="text" data-field="cta" class="service-field mt-1 block w-full input">
      </div>
      <div>
        <label class="block text-sm font-medium">Tipo de Enlace</label>
        <select data-field="linkType" class="service-field link-type-select mt-1 block w-full input ">
          <option value="contact">Enlace a secci√≥n contacto (#contacto)</option>
          <option value="internal">P√°gina interna (ej: sin-camara)</option>
          <option value="external">P√°gina externa (URL completa)</option>
        </select>
      </div>
      <div class="link-input-container hidden">
        <label class="block text-sm font-medium link-input-label">URL Destino</label>
        <input type="text" data-field="customLink" class="service-field mt-1 block w-full input" placeholder="">
        <small class="text-xs text-foreground/60 mt-1 link-input-help"></small>
      </div>
    </div>
  </div>
</template>



<script is:inline define:vars={{ initialContent: typedContent, authCredentials: credentials }}>
document.addEventListener('DOMContentLoaded', () => {
  let content = JSON.parse(JSON.stringify(initialContent));
  
  // Preparar autenticaci√≥n
  const authHeader = 'Basic ' + btoa(authCredentials.username + ':' + authCredentials.password);

  // Asegurarse de que todos los servicios tengan un ID
  content.individualServices.forEach(service => {
    if (!service.id) service.id = crypto.randomUUID();
  });

  const form = document.getElementById('services-form');
  const servicesContainer = document.getElementById('services-container');
  const serviceTemplate = document.getElementById('service-template');
  const addServiceBtn = document.getElementById('add-service-btn');

  function renderServices() {
    servicesContainer.innerHTML = '';
    content.individualServices.forEach(service => {
      const serviceEl = serviceTemplate.content.cloneNode(true).firstElementChild;
      serviceEl.dataset.serviceId = service.id;
      serviceEl.querySelector('[data-field="title"]').value = service.title;
      serviceEl.querySelector('[data-field="description"]').value = service.description;
      serviceEl.querySelector('[data-field="cta"]').value = service.cta;
      
      // Determinar el tipo de enlace basado en el servicio existente
      let linkType = 'contact';
      let customLink = '';
      
      if (service.type === 'ia-special' || service.customLink === 'sin-camara') {
        linkType = 'internal';
        customLink = 'sin-camara';
      } else if (service.customLink) {
        if (service.customLink.startsWith('http')) {
          linkType = 'external';
          customLink = service.customLink;
        } else {
          linkType = 'internal';
          customLink = service.customLink;
        }
      }
      
      serviceEl.querySelector('[data-field="linkType"]').value = linkType;
      serviceEl.querySelector('[data-field="customLink"]').value = customLink;
      
      updateLinkInputVisibility(serviceEl);
      servicesContainer.appendChild(serviceEl);
    });
  }

  // Funci√≥n para mostrar/ocultar el campo de enlace personalizado
  function updateLinkInputVisibility(serviceEl) {
    const linkTypeSelect = serviceEl.querySelector('[data-field="linkType"]');
    const linkContainer = serviceEl.querySelector('.link-input-container');
    const linkInput = serviceEl.querySelector('[data-field="customLink"]');
    const linkLabel = serviceEl.querySelector('.link-input-label');
    const linkHelp = serviceEl.querySelector('.link-input-help');
    
    const linkType = linkTypeSelect.value;
    
    if (linkType === 'contact') {
      linkContainer.classList.add('hidden');
    } else {
      linkContainer.classList.remove('hidden');
      if (linkType === 'internal') {
        linkLabel.textContent = 'P√°gina Interna';
        linkInput.placeholder = 'sin-camara';
        linkHelp.textContent = 'Solo el nombre de la p√°gina, sin "/" al inicio';
      } else if (linkType === 'external') {
        linkLabel.textContent = 'URL Externa';
        linkInput.placeholder = 'https://www.ejemplo.com';
        linkHelp.textContent = 'URL completa incluyendo https://';
      }
    }
  }

  // Funci√≥n para agregar nuevo servicio
  function addNewService() {
    const newService = {
      id: crypto.randomUUID(),
      title: 'Nuevo Servicio',
      description: 'Descripci√≥n del servicio...',
      cta: 'Saber m√°s ‚Üí',
      linkType: 'contact',
      customLink: ''
    };
    content.individualServices.push(newService);
    renderServices();
  }

  // MANEJO DE CLICS (Borrar servicios) - SOLO LOCAL
  form.addEventListener('click', (e) => {
    const target = e.target;
    
    const serviceEl = target.closest('.service-item');
    if (serviceEl && target.classList.contains('delete-service-btn')) {
      if (confirm('¬øSeguro que quieres borrar este servicio?')) {
        const serviceId = serviceEl.dataset.serviceId;
        content.individualServices = content.individualServices.filter(s => s.id !== serviceId);
        renderServices();
      }
    }
  });

  // Agregar nuevo servicio
  addServiceBtn.addEventListener('click', addNewService);
  
  // MANEJO DE EDICI√ìN DE TEXTO - SOLO LOCAL
  form.addEventListener('input', (e) => {
    const target = e.target;
    const serviceEl = target.closest('.service-item');

    if (serviceEl) {
        const serviceId = serviceEl.dataset.serviceId;
        const service = content.individualServices.find(s => s.id === serviceId);
        if (service && target.matches('[data-field]')) {
            service[target.dataset.field] = target.value;
        }
    } else { // Campos generales (t√≠tulo y subt√≠tulo)
        if(content[target.id] !== undefined) content[target.id] = target.value;
    }
  });

  // MANEJO DE CAMBIOS EN EL SELECT DE TIPO DE ENLACE
  form.addEventListener('change', (e) => {
    const target = e.target;
    if (target.matches('.link-type-select')) {
      const serviceEl = target.closest('.service-item');
      updateLinkInputVisibility(serviceEl);
      
      // Limpiar el campo personalizado cuando se cambia el tipo
      const customLinkInput = serviceEl.querySelector('[data-field="customLink"]');
      if (target.value === 'contact') {
        customLinkInput.value = '';
        const serviceId = serviceEl.dataset.serviceId;
        const service = content.individualServices.find(s => s.id === serviceId);
        if (service) service.customLink = '';
      }
    }
  });

  // BOT√ìN DE GUARDADO GENERAL - √öNICA LLAMADA A LA API
  document.getElementById('save-all-btn').addEventListener('click', async () => {
    const notification = document.getElementById('notification');
    try {
      const response = await fetch('/api/services', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': authHeader
        },
        body: JSON.stringify({ action: 'update_all', data: content }),
      });
      if (!response.ok) throw new Error('Error de red al guardar');
      
      notification.textContent = '¬°Cambios guardados con √©xito!';
      notification.className = 'p-4 mb-4 rounded-lg bg-green-200 text-green-800 block';
    } catch (error) {
      notification.textContent = 'Error al guardar. Int√©ntalo de nuevo.';
      notification.className = 'p-4 mb-4 rounded-lg bg-red-200 text-red-800 block';
    } finally {
      setTimeout(() => { notification.classList.add('hidden'); }, 3000);
    }
  });

  renderServices();
});
</script> 