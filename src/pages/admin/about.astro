---
import Layout from '../../layouts/AdminLayout.astro';
import aboutContent from '../../content/about.json';

// Pasar las credenciales de forma segura al cliente
const credentials = {
  username: import.meta.env.USUARIO,
  password: import.meta.env.PASS
};
---

<Layout title="Admin | Qui√©nes Somos">
  <button slot="page-actions" id="save-button" class="button-primary">Guardar Cambios</button>

  <main class="max-w-4xl mx-auto px-4 py-8">
    <a href="/admin" class="text-primary hover:underline mb-4 block">&larr; Volver al panel de admin</a>
    <h1 class="text-3xl font-bold mb-6 text-foreground">Editar Secci√≥n "Qui√©nes Somos"</h1>
    <p class="mb-6 text-foreground/80">Todos los cambios que realices se guardar√°n √∫nicamente cuando presiones el bot√≥n "Guardar Cambios" de la esquina superior derecha.</p>
    
    <div id="notification" class="hidden p-4 mb-4 rounded-lg"></div>

    <form id="about-form" class="space-y-8">
      
      <fieldset class="space-y-6 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2">Contenido Principal</legend>
        <div>
          <label for="title" class="block text-sm font-medium">T√≠tulo Principal</label>
          <input type="text" id="title" name="title" value={aboutContent.title} class="mt-1 block w-full input">
        </div>
        <div>
          <label for="paragraph" class="block text-sm font-medium">P√°rrafo Principal</label>
          <textarea id="paragraph" name="paragraph" rows="6" class="mt-1 block w-full input">{aboutContent.paragraph}</textarea>
        </div>
        <div>
            <label for="cta" class="block text-sm font-medium">Texto del Bot√≥n (CTA)</label>
            <input type="text" id="cta" name="cta" value={aboutContent.cta} class="mt-1 block w-full input">
        </div>
      </fieldset>
      
      <fieldset class="space-y-6 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2 text-secondary">Secci√≥n de Enfoque</legend>
        <div>
          <label for="focus-title" class="block text-sm font-medium">T√≠tulo de Enfoque</label>
          <input type="text" id="focus-title" name="focus.title" value={aboutContent.focus.title} class="mt-1 block w-full input">
        </div>
        <div>
          <label for="focus-paragraph" class="block text-sm font-medium">P√°rrafo de Enfoque</label>
          <textarea id="focus-paragraph" name="focus.paragraph" rows="4" class="mt-1 block w-full input">{aboutContent.focus.paragraph}</textarea>
        </div>
      </fieldset>
      
      <fieldset class="space-y-6 border border-foreground/20 p-6 rounded-lg">
        <legend class="text-xl font-bold px-2 text-primary">Secci√≥n de Razones</legend>
        <div>
          <label for="reasons-title" class="block text-sm font-medium">T√≠tulo de Razones</label>
          <input type="text" id="reasons-title" name="reasons.title" value={aboutContent.reasons.title} class="mt-1 block w-full input">
        </div>
        <div id="reasons-list" class="space-y-4 mt-4">
          <!-- Los items se cargar√°n aqu√≠ din√°micamente -->
        </div>
        <button type="button" id="add-reason" class="button-secondary">A√±adir Raz√≥n</button>
      </fieldset>
    </form>
  </main>
</Layout>

<template id="reason-template">
    <div class="reason-item flex items-center gap-2 p-2 bg-background-secondary rounded">
        <input type="text" data-field="icon" class="w-16 p-2 bg-background border border-border rounded" placeholder="Icono">
        <input type="text" data-field="text" class="flex-grow p-2 bg-background border border-border rounded" placeholder="Texto de la raz√≥n">
        <button type="button" class="remove-reason button-danger-outline">‚úñ</button>
    </div>
</template>

<script is:inline define:vars={{ contentData: aboutContent, authCredentials: credentials }}>
  document.addEventListener('DOMContentLoaded', async () => {
    const form = document.getElementById('about-form');
    const reasonsList = document.getElementById('reasons-list');
    const saveButton = document.getElementById('save-button');
    const notification = document.getElementById('notification');
    const reasonTemplate = document.getElementById('reason-template');

    // Preparar autenticaci√≥n
    const authHeader = 'Basic ' + btoa(authCredentials.username + ':' + authCredentials.password);

    function showNotification(message, isError = false) {
      notification.textContent = message;
      notification.className = `p-4 mb-4 rounded-lg ${isError ? 'bg-red-500/20 text-red-500' : 'bg-green-500/20 text-green-500'}`;
      notification.classList.remove('hidden');
      setTimeout(() => {
        notification.classList.add('hidden');
      }, 3000);
    }

    function renderReasons() {
      reasonsList.innerHTML = '';
      if (!contentData.reasons || !contentData.reasons.items) return;
      
      contentData.reasons.items.forEach((item, index) => {
        const reasonNode = reasonTemplate.content.cloneNode(true);
        const reasonDiv = reasonNode.querySelector('.reason-item');
        reasonDiv.dataset.index = index;
        reasonDiv.querySelector('[data-field="icon"]').value = item.icon;
        reasonDiv.querySelector('[data-field="text"]').value = item.text;
        reasonsList.appendChild(reasonNode);
      });
    }
    
    document.getElementById('add-reason').addEventListener('click', () => {
        if (!contentData.reasons.items) contentData.reasons.items = [];
        contentData.reasons.items.push({ icon: 'üÜï', text: 'Nueva raz√≥n' });
        renderReasons();
    });

    reasonsList.addEventListener('click', (e) => {
      const removeButton = e.target.closest('.remove-reason');
      if (removeButton) {
        const index = removeButton.closest('.reason-item').dataset.index;
        contentData.reasons.items.splice(index, 1);
        renderReasons();
      }
    });

    saveButton.addEventListener('click', async () => {
      saveButton.textContent = 'Guardando...';
      saveButton.disabled = true;

      const formData = new FormData(form);
      const updatedContent = {
        title: formData.get('title'),
        paragraph: formData.get('paragraph'),
        cta: formData.get('cta'),
        focus: {
          title: formData.get('focus.title'),
          paragraph: formData.get('focus.paragraph')
        },
        reasons: {
          title: formData.get('reasons.title'),
          items: []
        }
      };
      
      const reasonNodes = reasonsList.querySelectorAll('.reason-item');
      reasonNodes.forEach(node => {
          updatedContent.reasons.items.push({
              icon: node.querySelector('[data-field="icon"]').value,
              text: node.querySelector('[data-field="text"]').value
          });
      });

      try {
        const response = await fetch('/api/about', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Authorization': authHeader
          },
          body: JSON.stringify(updatedContent)
        });

        if (!response.ok) throw new Error('Failed to save');
        showNotification('¬°Contenido guardado con √©xito!');
        
      } catch (error) {
        console.error("Error saving content:", error);
        showNotification('Error al guardar el contenido.', true);
      } finally {
        saveButton.textContent = 'Guardar Cambios';
        saveButton.disabled = false;
      }
    });

    renderReasons();
  });
</script> 