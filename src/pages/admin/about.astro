---
export const prerender = false;

import Layout from '../../layouts/AdminLayout.astro';
import { promises as fs } from 'fs';
import path from 'path';

// Leer el contenido din√°micamente
const aboutPath = path.join(process.cwd(), 'src/content/about.json');
const aboutFile = await fs.readFile(aboutPath, 'utf-8');
const aboutContent = JSON.parse(aboutFile);

// Pasar las credenciales de forma segura al cliente
const credentials = {
  username: process.env.USUARIO || import.meta.env.USUARIO,
  password: process.env.PASS || import.meta.env.PASS
};
---

<Layout title="Admin - Secci√≥n Nosotros">
  <button slot="page-actions" id="save-btn" class="button-primary">Guardar Cambios</button>

  <div class="max-w-4xl mx-auto py-10 px-4">
    <a href="/admin" class="text-primary hover:underline mb-4 block">&larr; Volver al panel de admin</a>
    <h1 class="text-3xl font-bold mb-6">Editar Contenido de "Nosotros"</h1>
    
    <div id="notification" class="hidden p-4 mb-4 rounded-lg"></div>

    <!-- Informaci√≥n sobre formato -->
    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
      <h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">üí° Formato de texto disponible:</h3>
      <ul class="text-sm text-blue-700 dark:text-blue-300 space-y-1">
        <li>‚Ä¢ Para <strong>negritas</strong>: usa **texto en negrita**</li>
        <li>‚Ä¢ Los saltos de l√≠nea se respetan autom√°ticamente</li>
      </ul>
    </div>

    <form id="about-form">
      <div class="space-y-6">
        <div>
          <label for="title" class="block text-sm font-medium text-foreground/90">T√≠tulo Principal</label>
          <input type="text" id="title" name="title" value={aboutContent.title} class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="subtitle" class="block text-sm font-medium text-foreground/90">Subt√≠tulo</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <input type="text" id="subtitle" name="subtitle" value={aboutContent.subtitle || ''} class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="paragraph" class="block text-sm font-medium text-foreground/90">P√°rrafo Principal</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <textarea id="paragraph" name="paragraph" rows="4" class="mt-1 block w-full input">{aboutContent.paragraph}</textarea>
        </div>

        <hr class="border-foreground/20">

        <h2 class="text-2xl font-bold">Secci√≥n Enfoque</h2>
        
        <div>
          <label for="focusTitle" class="block text-sm font-medium text-foreground/90">T√≠tulo del Enfoque</label>
          <input type="text" id="focusTitle" name="focusTitle" value={aboutContent.focus.title} class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="focusSubtitle" class="block text-sm font-medium text-foreground/90">Subt√≠tulo del Enfoque</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <input type="text" id="focusSubtitle" name="focusSubtitle" value={aboutContent.focus.subtitle || ''} class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="focusParagraph" class="block text-sm font-medium text-foreground/90">P√°rrafo del Enfoque</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <textarea id="focusParagraph" name="focusParagraph" rows="4" class="mt-1 block w-full input">{aboutContent.focus.paragraph}</textarea>
        </div>


      </div>
    </form>
  </div>
</Layout>



<script is:inline define:vars={{ contentData: aboutContent, authCredentials: credentials }}>
  document.addEventListener('DOMContentLoaded', async () => {
    const form = document.getElementById('about-form');
    const saveButton = document.getElementById('save-btn');
    const notification = document.getElementById('notification');

    // Preparar autenticaci√≥n
    const authHeader = 'Basic ' + btoa(authCredentials.username + ':' + authCredentials.password);

    const showNotification = (message, isError = false) => {
      if (notification) {
        notification.textContent = message;
        notification.className = `p-4 mb-4 rounded-lg ${isError ? 'bg-red-200 text-red-800' : 'bg-green-200 text-green-800'} block`;
        setTimeout(() => { notification.classList.add('hidden'); }, 3000);
      }
    };

    const handleSave = async () => {
      if (!form) return;
      const formData = new FormData(form);
      
      const data = {
        title: formData.get('title'),
        subtitle: formData.get('subtitle'),
        paragraph: formData.get('paragraph'),
        focus: {
          title: formData.get('focusTitle'),
          subtitle: formData.get('focusSubtitle'),
          paragraph: formData.get('focusParagraph')
        }
      };

      try {
        const response = await fetch('/api/about', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Authorization': authHeader
          },
          body: JSON.stringify(data),
        });

        if (!response.ok) throw new Error('Error al guardar');
        showNotification('¬°Contenido guardado con √©xito!');
      } catch (error) {
        showNotification('Error al guardar. Int√©ntalo de nuevo.', true);
      }
    };

    if (form && saveButton && notification) {
      saveButton.addEventListener('click', handleSave);
    } else {
      console.error('Error: No se encontraron los elementos del formulario en la p√°gina.');
    }
  });
</script> 