---
export const prerender = false;

import Layout from '../../layouts/AdminLayout.astro';
import { promises as fs } from 'fs';
import path from 'path';

// Leer el contenido din√°micamente
const heroPath = path.join(process.cwd(), 'src/content/hero.json');
const heroFile = await fs.readFile(heroPath, 'utf-8');
const heroContent = JSON.parse(heroFile);

// Pasar las credenciales de forma segura al cliente
const credentials = {
  username: process.env.USUARIO || import.meta.env.USUARIO,
  password: process.env.PASS || import.meta.env.PASS
};
---

<Layout title="Admin - Hero Section">
  <button slot="page-actions" id="save-btn" class="button-primary">Guardar Cambios</button>

  <div class="max-w-4xl mx-auto py-10 px-4">
    <a href="/admin" class="text-primary hover:underline mb-4 block">&larr; Volver al panel de admin</a>
    <h1 class="text-3xl font-bold mb-6">Editar Contenido de la Secci√≥n Hero</h1>
    
    <div id="notification" class="hidden p-4 mb-4 rounded-lg"></div>

    <!-- Informaci√≥n sobre formato -->
    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
      <h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">üí° Formato de texto disponible:</h3>
      <ul class="text-sm text-blue-700 dark:text-blue-300 space-y-1">
        <li>‚Ä¢ Para <strong>negritas</strong>: usa **texto en negrita**</li>
        <li>‚Ä¢ Los saltos de l√≠nea se respetan autom√°ticamente</li>
      </ul>
    </div>

    <form id="hero-form">
      <div class="space-y-6">
        <div>
          <label for="headline" class="block text-sm font-medium text-foreground/90">Titular Principal</label>
          <input type="text" id="headline" name="headline" value={heroContent.headline} class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="subheadline" class="block text-sm font-medium text-foreground/90">Sub-titular</label>
          <input type="text" id="subheadline" name="subheadline" value={heroContent.subheadline} class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="paragraph" class="block text-sm font-medium text-foreground/90">P√°rrafo de Introducci√≥n</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <textarea id="paragraph" name="paragraph" rows="4" class="mt-1 block w-full input">{heroContent.paragraph}</textarea>
        </div>
        
        <div>
          <label for="ctaButton" class="block text-sm font-medium text-foreground/90">Texto del Bot√≥n (CTA)</label>
          <input type="text" id="ctaButton" name="ctaButton" value={heroContent.ctaButton} class="mt-1 block w-full input">
        </div>

        <hr class="border-foreground/20">

        <h2 class="text-2xl font-bold">Secci√≥n Promesa</h2>
        
        <div>
          <label for="promiseTitle" class="block text-sm font-medium text-foreground/90">T√≠tulo de la Promesa</label>
          <input type="text" id="promiseTitle" name="promiseTitle" value={heroContent.promise.title} class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="promiseParagraph" class="block text-sm font-medium text-foreground/90">P√°rrafo de la Promesa</label>
          <small class="text-xs text-foreground/60 block mb-1">Puedes usar **negritas** y saltos de l√≠nea</small>
          <textarea id="promiseParagraph" name="promiseParagraph" rows="4" class="mt-1 block w-full input">{heroContent.promise.paragraph}</textarea>
        </div>
        
        <div>
          <label for="promiseCtaButton" class="block text-sm font-medium text-foreground/90">Texto del Bot√≥n CTA (Promesa)</label>
          <input type="text" id="promiseCtaButton" name="promiseCtaButton" value={heroContent.promise.ctaButton} class="mt-1 block w-full input">
        </div>
      </div>
    </form>
  </div>
</Layout>

<script is:inline define:vars={{ authCredentials: credentials }}>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('hero-form');
  const saveBtn = document.getElementById('save-btn');
  const notification = document.getElementById('notification');

  // Preparar autenticaci√≥n
  const authHeader = 'Basic ' + btoa(authCredentials.username + ':' + authCredentials.password);

  const showNotification = (message, isError = false) => {
    if (notification) {
      notification.textContent = message;
      notification.className = `p-4 mb-4 rounded-lg ${isError ? 'bg-red-200 text-red-800' : 'bg-green-200 text-green-800'} block`;
      setTimeout(() => { notification.classList.add('hidden'); }, 3000);
    }
  };

  const handleSave = async () => {
    if (!form) return;
    const formData = new FormData(form);
    const data = {
      headline: formData.get('headline'),
      subheadline: formData.get('subheadline'),
      paragraph: formData.get('paragraph'),
      ctaButton: formData.get('ctaButton'),
      promise: {
        title: formData.get('promiseTitle'),
        paragraph: formData.get('promiseParagraph'),
        ctaButton: formData.get('promiseCtaButton')
      }
    };

    try {
      const response = await fetch('/api/hero', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': authHeader
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) throw new Error('Error al guardar');
      showNotification('¬°Contenido guardado con √©xito!');
    } catch (error) {
      showNotification('Error al guardar. Int√©ntalo de nuevo.', true);
    }
  };

  if (form && saveBtn && notification) {
    saveBtn.addEventListener('click', handleSave);
  } else {
    console.error('Error: No se encontraron los elementos del formulario en la p√°gina.');
  }
});
</script> 