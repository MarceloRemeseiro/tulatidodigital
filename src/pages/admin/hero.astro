---
import Layout from '../../layouts/AdminLayout.astro';
---

<Layout title="Admin - Hero Section">
  <button slot="page-actions" id="save-btn" class="button-primary">Guardar Cambios</button>

  <div class="max-w-4xl mx-auto py-10 px-4">
    <a href="/admin" class="text-primary hover:underline mb-4 block">&larr; Volver al panel de admin</a>
    <h1 class="text-3xl font-bold mb-6">Editar Contenido de la Sección Hero</h1>
    
    <div id="notification" class="hidden p-4 mb-4 rounded-lg"></div>

    <form id="hero-form">
      <div class="space-y-6">
        <div>
          <label for="headline" class="block text-sm font-medium text-foreground/90">Titular Principal</label>
          <input type="text" id="headline" name="headline" class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="subheadline" class="block text-sm font-medium text-foreground/90">Sub-titular</label>
          <input type="text" id="subheadline" name="subheadline" class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="paragraph" class="block text-sm font-medium text-foreground/90">Párrafo de Introducción</label>
          <textarea id="paragraph" name="paragraph" rows="4" class="mt-1 block w-full input"></textarea>
        </div>
        
        <div>
          <label for="ctaButton" class="block text-sm font-medium text-foreground/90">Texto del Botón (CTA)</label>
          <input type="text" id="ctaButton" name="ctaButton" class="mt-1 block w-full input">
        </div>

        <hr class="border-foreground/20">

        <h2 class="text-2xl font-bold">Sección Promesa</h2>
        
        <div>
          <label for="promiseTitle" class="block text-sm font-medium text-foreground/90">Título de la Promesa</label>
          <input type="text" id="promiseTitle" name="promiseTitle" class="mt-1 block w-full input">
        </div>
        
        <div>
          <label for="promiseParagraph" class="block text-sm font-medium text-foreground/90">Párrafo de la Promesa</label>
          <textarea id="promiseParagraph" name="promiseParagraph" rows="4" class="mt-1 block w-full input"></textarea>
        </div>
      </div>
    </form>
  </div>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('hero-form') as HTMLFormElement | null;
  const saveBtn = document.getElementById('save-btn');
  const notification = document.getElementById('notification');

  const showNotification = (message: string, isError = false) => {
    if (notification) {
      notification.textContent = message;
      notification.className = `p-4 mb-4 rounded-lg ${isError ? 'bg-red-200 text-red-800' : 'bg-green-200 text-green-800'} block`;
      setTimeout(() => { notification.classList.add('hidden'); }, 3000);
    }
  };
  
  const loadContent = async () => {
    if (!form) return;
    try {
      const response = await fetch('/api/hero');
      if (!response.ok) throw new Error('Failed to load content');
      const content = await response.json();
      
      (form.elements.namedItem('headline') as HTMLInputElement).value = content.headline;
      (form.elements.namedItem('subheadline') as HTMLInputElement).value = content.subheadline;
      (form.elements.namedItem('paragraph') as HTMLInputElement).value = content.paragraph;
      (form.elements.namedItem('ctaButton') as HTMLInputElement).value = content.ctaButton;
      (form.elements.namedItem('promiseTitle') as HTMLInputElement).value = content.promise.title;
      (form.elements.namedItem('promiseParagraph') as HTMLInputElement).value = content.promise.paragraph;

    } catch (error) {
      console.error("Error loading content:", error);
      showNotification('No se pudo cargar el contenido.', true);
    }
  };

  const handleSave = async () => {
    if (!form) return;
    const formData = new FormData(form);
    const data = {
      headline: formData.get('headline'),
      subheadline: formData.get('subheadline'),
      paragraph: formData.get('paragraph'),
      ctaButton: formData.get('ctaButton'),
      promise: {
        title: formData.get('promiseTitle'),
        paragraph: formData.get('promiseParagraph')
      }
    };

    try {
      const response = await fetch('/api/hero', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (!response.ok) throw new Error('Error al guardar');
      showNotification('¡Contenido guardado con éxito!');
    } catch (error) {
      showNotification('Error al guardar. Inténtalo de nuevo.', true);
    }
  };

  if (form && saveBtn && notification) {
    loadContent();
    saveBtn.addEventListener('click', handleSave);
  } else {
    console.error('Error: No se encontraron los elementos del formulario en la página.');
  }
});
</script> 